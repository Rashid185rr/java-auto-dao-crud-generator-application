/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package database;

import database.connect.ConnectDB;
import database.connect.DB;
import database.table.Column1;
import database.table.Table1;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author tahir hussain
 */
public class TableDB {

    private String tableName;

    public static Column1[] getColumns(String tableName) {
        Column1[] column1 = null;
        try {

            DatabaseMetaData meta = null;
            Connection con = ConnectDB.getConnection(DB.MySQL, tableName);
            meta = con.getMetaData();
            //checking
            ResultSet rsa = meta.getColumns(tableName, null, null, null);
            
            int col_len=rsa.getMetaData().getColumnCount();
            
            System.out.println("checking column");
            column1=new Column1[col_len];
//column and table object will be created below            
            
            int i = 0;
while(rsa.next()) {
                //column1[i]=new Column1[rsa.getString(4)];
//                column1[i]=new Column1(
//                        rsa.getString(1)+" "+ rsa.getString(2)+" "+rsa.getString(3)+" "+rsa.getString(4)+" "+rsa.getString(5)+" "+
//                rsa.getString(6)+" "+ rsa.getString(7)+" "+rsa.getString(8)+" "+rsa.getString(9)+" "+rsa.getString(10)
//                );
/*
                new Column1(getTableCat(),
getTableSchem(),
getTableName(),
getColName(),
getDataType(),
getTypeName(),
getColumnSize(),
getBufferLength(),
getDecimalDigits(),
getNumPrecRadix(),
getNullable(),
getRemarks(),
getColumnDef(),
getSqlDataType(),
getSqlDateTimeSub(),
getCharOctetLength(),
getOrdinalPosition(),
getIsNullable(),
getScopeCatalog(),
getScopeSchema(),
getScopeTable(),
getSourceDataType(),
getIsAutoIncrememnt(),
getIsGeneratedCol());

*/
 
column1[i++]=new Column1(
        rsa.getString(1),
        rsa.getString(2),
        rsa.getString(3),
        rsa.getString(4),
        rsa.getInt(5),
        rsa.getString(6), 
        rsa.getInt(7),
        rsa.getInt(8),
        rsa.getInt(9),
        rsa.getInt(10),
        rsa.getInt(11),
        rsa.getString(12),
        rsa.getString(13),
        rsa.getInt(14),
        rsa.getInt(15),
        rsa.getInt(16),
        rsa.getInt(17),
        rsa.getString(18),
        rsa.getString(19),
        rsa.getString(20),
        rsa.getString(21),
        rsa.getShort(22),
        rsa.getString(23),
        rsa.getString(24)
);

//System.out.println(rsa.getString(1)+" "+ rsa.getString(2)+" "+rsa.getString(3)+" "+rsa.getString(4)+" "+rsa.getString(5)+" "+
//                rsa.getString(6)+" "+ rsa.getString(7)+" "+rsa.getString(8)+" "+rsa.getString(9)+" "+rsa.getString(10));
            
}
            
            System.out.println("checking column end");
            
            //setting column object
//            PreparedStatement pre = con.prepareStatement("SELECT * FROM " + tableName);
//            ResultSet rs = pre.executeQuery();
//            ResultSetMetaData meta1 = rs.getMetaData();
//            int col_len = meta1.getColumnCount();
//            List<String> list = new ArrayList<>();
//            for (i = 1; i <= col_len; i++) {
//                list.add(meta1.getColumnName(i));
//
//            }
//
//            System.out.println(list);
//            column1 = new Column1[col_len];
//            i = 0;
//            System.out.println(" \n Columns \n ");
//            while (rs.next()) {
//                column1[i] = new Column1(list.get(i), rs.getType());
//                System.out.println(column1[i]);
//            }
//            System.out.println("\n");
//            for (Column1 col : column1) {
//                System.out.println(col);
//            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return column1;

    }

    public static Table1[] getTables(String[] table){
        Table1[] tables=new Table1[table.length];
        
        int i=0;
        for(String t:table){
            tables[i]=new Table1(t,getColumns(t));
            System.out.println(tables[i]);
        }
        
        return tables;
    }
    
    public int getColumnType(int i) {

        switch (i) {
            case Types.ARRAY:
                return Types.ARRAY;

            case Types.BIGINT:

                return Types.BIGINT;

            case Types.BINARY:
                return Types.BINARY;

            case Types.BIT:
                return Types.BIT;
            case Types.BLOB:
                return Types.BLOB;

            case Types.BOOLEAN:
                return Types.BLOB;

            case Types.CHAR:
                return Types.CHAR;

            case Types.CLOB:
                return Types.CLOB;

            case Types.DATALINK:
                return Types.DATALINK;

            case Types.DATE:
                return Types.DATE;

            case Types.DECIMAL:
                return Types.DECIMAL;

            case Types.DISTINCT:
                return Types.DISTINCT;
            case Types.DOUBLE:
                return Types.DOUBLE;
            case Types.FLOAT:
                return Types.FLOAT;
            case Types.INTEGER:

                return Types.INTEGER;

            default:
                break;
        }

        return -1;
    }

}

