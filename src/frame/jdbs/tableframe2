/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frame.crudsoft;

import database.table.Column1;
import database.table.Table1;
import fr.Crud;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.ListModel;

/**
 *
 * @author tahir hussain
 */
public class TableFrame extends javax.swing.JFrame {

    /**
     * Creates new form TableFrame
     */
    Table1[] table;
    int tableIndex;
    Crud crudFrame;
    LinkedList<Table1> selectedTables;
    LinkedList<Column1> selectedColumns;
    LinkedList<Crud> crudList;
//    LinkedList<JList> selectedList;
//    LinkedList<JList> unselectedList;
//   
    LinkedList<DefaultListModel<String>> from;
    LinkedList<DefaultListModel<String>> to;

    public TableFrame() {

        table = null;
        //  columnIndex=0;
        crudFrame = new Crud();
        crudList = new LinkedList<>();
        from=new LinkedList<>();
        to=new LinkedList<>();
        
        initComponents();
        selectedColumns = new LinkedList<>();
    }

    public TableFrame(Table1[] table) {
        this.table = table;
        crudFrame = new Crud();
        crudList = new LinkedList<>();
        from=new LinkedList<>();
        to=new LinkedList<>();
        initComponents();
        selectedTables = new LinkedList();
        setValues();
        
    }
 
     public void setValues(){
//         if(tableIndex==0){
        unselectedList.removeAll();
        selectedList.removeAll();
        
        System.out.println("Table"+tableIndex);
        setDefaultListModel(table[tableIndex]);
             unselectedList.setModel(from.get(tableIndex));
             DefaultListModel<String> k=new DefaultListModel<>();
             
             to.push(k);
             selectedList.setModel(to.get(tableIndex));
//         }else{
         
         
             
//         }
         
     }

    public DefaultListModel setDefaultListModel(Table1 table) {

        from.push(new DefaultListModel());
        Column1[] columns = table.getColumn();
        List<String> itemList = new LinkedList<>();
        for (Column1 col : columns) {
            String colName = "" + col.getColName();
            if (col.isPrimaryKey()) {
                colName += " (Primary Key)";
            }
            if (col.getIsAutoIncrememnt().equals("YES")) {
                colName += " (AutoIncrement) ";
            }
            from.get(tableIndex).addElement(colName);
        }
        return from.get(tableIndex);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        tableTab1 = new javax.swing.JPanel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        columnSelectedLBL = new javax.swing.JLabel();
        scrollPane1 = new javax.swing.JScrollPane();
        selectedList = new javax.swing.JList<>();
        columnSelectedLBL1 = new javax.swing.JLabel();
        allColumnRd1 = new javax.swing.JRadioButton();
        columnsSelectionLBL1 = new javax.swing.JLabel();
        nextTab = new javax.swing.JButton();
        prevTab1 = new javax.swing.JButton();
        scrollPane2 = new javax.swing.JScrollPane();
        unselectedList = new javax.swing.JList<>();
        removeBtn = new javax.swing.JLabel();
        columnSelectedLBL4 = new javax.swing.JLabel();
        addBtn = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tableTab2 = new javax.swing.JPanel();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        tableNameLBL2 = new javax.swing.JLabel();
        columnSelectedLBL2 = new javax.swing.JLabel();
        columnSelectedLBL3 = new javax.swing.JLabel();
        allBtnRD = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        insertChk1 = new javax.swing.JCheckBox();
        deleteChk1 = new javax.swing.JCheckBox();
        updateChk1 = new javax.swing.JCheckBox();
        viewChk1 = new javax.swing.JCheckBox();
        cancelChk1 = new javax.swing.JCheckBox();
        nextChk1 = new javax.swing.JCheckBox();
        backChk1 = new javax.swing.JCheckBox();
        tableNameLBL1 = new javax.swing.JLabel();
        nextTab1 = new javax.swing.JButton();
        prevTab = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tableTab1.setPreferredSize(new java.awt.Dimension(1458, 673));
        tableTab1.setLayout(null);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        tableTab1.add(jLayeredPane1);
        jLayeredPane1.setBounds(813, 47, 0, 0);
        tableTab1.add(columnSelectedLBL);
        columnSelectedLBL.setBounds(140, 219, 114, 47);

        selectedList.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        selectedList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                selectedListValueChanged(evt);
            }
        });
        scrollPane1.setViewportView(selectedList);

        tableTab1.add(scrollPane1);
        scrollPane1.setBounds(770, 80, 320, 580);

        columnSelectedLBL1.setText("Unselected");
        tableTab1.add(columnSelectedLBL1);
        columnSelectedLBL1.setBounds(10, 120, 140, 30);

        allColumnRd1.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        allColumnRd1.setText("Select All");
        allColumnRd1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allColumnRd1ActionPerformed(evt);
            }
        });
        tableTab1.add(allColumnRd1);
        allColumnRd1.setBounds(20, 39, 138, 35);

        columnsSelectionLBL1.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        columnsSelectionLBL1.setText("Columns Selected");
        tableTab1.add(columnsSelectionLBL1);
        columnsSelectionLBL1.setBounds(1200, 70, 150, 47);

        nextTab.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frame/newsoftframe/images/next/next (2).png"))); // NOI18N
        nextTab.setText("NEXT TABLE");
        nextTab.setHideActionText(true);
        nextTab.setIconTextGap(5);
        nextTab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextTabActionPerformed(evt);
            }
        });
        tableTab1.add(nextTab);
        nextTab.setBounds(1090, 630, 265, 39);

        prevTab1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frame/newsoftframe/images/back/ (6).png"))); // NOI18N
        prevTab1.setText("PREVIOUS TABLE");
        prevTab1.setAutoscrolls(true);
        prevTab1.setFocusCycleRoot(true);
        prevTab1.setIconTextGap(5);
        prevTab1.setOpaque(true);
        prevTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevTab1ActionPerformed(evt);
            }
        });
        tableTab1.add(prevTab1);
        prevTab1.setBounds(0, 630, 265, 44);

        unselectedList.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        unselectedList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                unselectedListValueChanged(evt);
            }
        });
        scrollPane2.setViewportView(unselectedList);

        tableTab1.add(scrollPane2);
        scrollPane2.setBounds(280, 80, 320, 580);

        removeBtn.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        removeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frame/newsoftframe/images/back/ (7).png"))); // NOI18N
        removeBtn.setText("REMOVE");
        removeBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeBtnMouseClicked(evt);
            }
        });
        tableTab1.add(removeBtn);
        removeBtn.setBounds(610, 320, 140, 60);

        columnSelectedLBL4.setText("Selected");
        tableTab1.add(columnSelectedLBL4);
        columnSelectedLBL4.setBounds(1180, 130, 110, 30);

        addBtn.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        addBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frame/newsoftframe/images/next/next (5).png"))); // NOI18N
        addBtn.setText("ADD");
        addBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addBtnMouseClicked(evt);
            }
        });
        tableTab1.add(addBtn);
        addBtn.setBounds(620, 250, 120, 60);

        jLabel5.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel5.setText("Selected Columns");
        tableTab1.add(jLabel5);
        jLabel5.setBounds(780, 20, 160, 40);

        jLabel6.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel6.setText("UnSelected Columns");
        tableTab1.add(jLabel6);
        jLabel6.setBounds(290, 20, 180, 40);

        jTabbedPane1.addTab("Table", tableTab1);

        tableTab2.setPreferredSize(new java.awt.Dimension(1458, 673));
        tableTab2.setLayout(null);

        javax.swing.GroupLayout jLayeredPane2Layout = new javax.swing.GroupLayout(jLayeredPane2);
        jLayeredPane2.setLayout(jLayeredPane2Layout);
        jLayeredPane2Layout.setHorizontalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jLayeredPane2Layout.setVerticalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        tableTab2.add(jLayeredPane2);
        jLayeredPane2.setBounds(813, 47, 0, 0);

        tableNameLBL2.setFont(new java.awt.Font("sansserif", 0, 36)); // NOI18N
        tableNameLBL2.setText("Table Name");
        tableTab2.add(tableNameLBL2);
        tableNameLBL2.setBounds(290, 6, 452, 111);
        tableTab2.add(columnSelectedLBL2);
        columnSelectedLBL2.setBounds(140, 219, 114, 47);
        tableTab2.add(columnSelectedLBL3);
        columnSelectedLBL3.setBounds(180, 520, 510, 140);

        allBtnRD.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        allBtnRD.setText("Select All");
        allBtnRD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                allBtnRDMouseClicked(evt);
            }
        });
        tableTab2.add(allBtnRD);
        allBtnRD.setBounds(20, 230, 138, 35);

        jLabel2.setFont(new java.awt.Font("sansserif", 0, 36)); // NOI18N
        jLabel2.setText("Buttons");
        tableTab2.add(jLabel2);
        jLabel2.setBounds(20, 110, 364, 73);

        insertChk1.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        insertChk1.setText("INSERT");
        insertChk1.setOpaque(true);
        insertChk1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertChk1ActionPerformed(evt);
            }
        });
        tableTab2.add(insertChk1);
        insertChk1.setBounds(60, 280, 158, 42);

        deleteChk1.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        deleteChk1.setText("DELETE");
        deleteChk1.setOpaque(true);
        deleteChk1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteChk1ActionPerformed(evt);
            }
        });
        tableTab2.add(deleteChk1);
        deleteChk1.setBounds(60, 320, 158, 42);

        updateChk1.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        updateChk1.setText("UPDATE");
        updateChk1.setOpaque(true);
        updateChk1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateChk1ActionPerformed(evt);
            }
        });
        tableTab2.add(updateChk1);
        updateChk1.setBounds(60, 360, 158, 42);

        viewChk1.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        viewChk1.setText("VIEW");
        viewChk1.setOpaque(true);
        viewChk1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewChk1ActionPerformed(evt);
            }
        });
        tableTab2.add(viewChk1);
        viewChk1.setBounds(60, 400, 158, 42);

        cancelChk1.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        cancelChk1.setText("CANCEL");
        cancelChk1.setOpaque(true);
        cancelChk1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelChk1ActionPerformed(evt);
            }
        });
        tableTab2.add(cancelChk1);
        cancelChk1.setBounds(60, 440, 158, 42);

        nextChk1.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        nextChk1.setText("NEXT");
        nextChk1.setOpaque(true);
        nextChk1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextChk1ActionPerformed(evt);
            }
        });
        tableTab2.add(nextChk1);
        nextChk1.setBounds(60, 520, 158, 42);

        backChk1.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        backChk1.setText("BACK");
        backChk1.setOpaque(true);
        backChk1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backChk1ActionPerformed(evt);
            }
        });
        tableTab2.add(backChk1);
        backChk1.setBounds(60, 480, 158, 42);

        jTabbedPane1.addTab("Buttons", tableTab2);

        jPanel1.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 1359, -1));

        tableNameLBL1.setFont(new java.awt.Font("sansserif", 0, 36)); // NOI18N
        tableNameLBL1.setText("Table Name");
        jPanel1.add(tableNameLBL1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 10, 452, 70));

        nextTab1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frame/newsoftframe/images/next/next (2).png"))); // NOI18N
        nextTab1.setText("NEXT");
        nextTab1.setHideActionText(true);
        nextTab1.setIconTextGap(5);
        nextTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextTab1ActionPerformed(evt);
            }
        });

        prevTab.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frame/newsoftframe/images/back/ (6).png"))); // NOI18N
        prevTab.setText("PREVIOUS");
        prevTab.setAutoscrolls(true);
        prevTab.setFocusCycleRoot(true);
        prevTab.setIconTextGap(5);
        prevTab.setOpaque(true);
        prevTab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevTabActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(prevTab, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(1110, Short.MAX_VALUE)
                    .addComponent(nextTab1, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(10, 10, 10)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(prevTab)
                .addContainerGap(12, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(795, Short.MAX_VALUE)
                    .addComponent(nextTab1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(1, 1, 1)))
        );

        pack();
    }// </editor-fold>                        

    private void insertChk1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void selectedListValueChanged(javax.swing.event.ListSelectionEvent evt) {                                          
//        List<String> list=columnList1.getSelectedValuesList();
//        for(String str:list){
//            System.out.println(str);
//        }
//        
//        System.out.println("--->" + selectedList.getSelectedValue());
//        int selectedIndex = selectedList.getSelectedIndex();
////    Column1[] columns=
////    for(int i=0; i<)
////        selectedColumns.add();
////        
//        int[] indices = selectedList.getSelectedIndices();
//        Table1 t = table[0];
//        selectedTables.add(t);
//        Column1[] columns = t.getColumn();
//        int i = 0;
//        for (int index : indices) {
//            for (Column1 col : columns) {
//                if (indices[index] == i) {
//                    selectedColumns.add(col);
//                }
//                i++;
//            }
//            index++;
//        }
//        columnSelectedLBL1.setText("" + Arrays.toString(indices));
//        System.out.println(Arrays.asList(selectedColumns));

        /*from=new DefaultListModel<>();
        to=new DefaultListModel<>();
        Column1[] columns=table[0].getColumn();
        for(Column1 col:columns){
            
            if(col.isPrimaryKey()){
            }
        }*/

    }                                         

    private void deleteChk1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        System.out.println("delete is selected");
    }                                          

    private void updateChk1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        System.out.println("update is selected");
    }                                          

    private void viewChk1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        System.out.println("view is selected");
    }                                        

    private void cancelChk1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void backChk1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void nextChk1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void nextTabActionPerformed(java.awt.event.ActionEvent evt) {                                        
        ++tableIndex;
        setValues();
        unselectedList.removeAll();
        
        selectedList.removeAll();


    }                                       

    private void prevTabActionPerformed(java.awt.event.ActionEvent evt) {                                        

    }                                       

    private void allBtnRDMouseClicked(java.awt.event.MouseEvent evt) {                                      
// doing it manually irritated me.

// alternatives exist
        if (allBtnRD.isSelected()) {
            crudFrame.setBackBtn(true);
            crudFrame.setDeleteBtn(true);
            crudFrame.setInsertBtn(true);
            crudFrame.setIsTable(true);
            crudFrame.setNextBtn(true);
            crudFrame.setUpdateBtn(true);
            crudFrame.setViewBtn(true);
            insertChk1.setSelected(true);
            insertChk1.setEnabled(false);
            updateChk1.setSelected(true);
            updateChk1.setEnabled(false);
            backChk1.setSelected(true);
            backChk1.setEnabled(false);
            nextChk1.setEnabled(false);
            nextChk1.setSelected(true);
            viewChk1.setEnabled(false);
            viewChk1.setSelected(true);
            deleteChk1.setSelected(true);
            deleteChk1.setEnabled(false);
            cancelChk1.setSelected(true);
            cancelChk1.setEnabled(false);

        } else {
            crudFrame.setBackBtn(false);
            crudFrame.setDeleteBtn(false);
            crudFrame.setInsertBtn(false);
            crudFrame.setIsTable(false);
            crudFrame.setNextBtn(false);
            crudFrame.setUpdateBtn(false);
            crudFrame.setViewBtn(false);
            insertChk1.setSelected(false);
            insertChk1.setEnabled(true);
            updateChk1.setSelected(false);
            updateChk1.setEnabled(true);
            backChk1.setSelected(false);
            backChk1.setEnabled(true);
            nextChk1.setEnabled(true);
            nextChk1.setSelected(false);
            viewChk1.setEnabled(true);
            viewChk1.setSelected(false);
            deleteChk1.setSelected(false);
            deleteChk1.setEnabled(true);
            cancelChk1.setSelected(false);
            cancelChk1.setEnabled(true);

        }


    }                                     

    private void nextTab1ActionPerformed(java.awt.event.ActionEvent evt) {                                         

        //setValues

    }                                        

    private void prevTab1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int col_len = table[tableIndex].getColumn().length;
        Column1[] col = selectedColumns.toArray(new Column1[0]);

        if (!to.isEmpty()) {
            Table1 table = selectedTables.get(tableIndex);
            selectedColumns.addAll(Arrays.asList(table.getColumn()));
            from.add(new DefaultListModel<>());
            to.add(new DefaultListModel<>());
        }
    }                                        

    private void unselectedListValueChanged(javax.swing.event.ListSelectionEvent evt) {                                            


    }                                           
 /*
    private void setValues() {
        
        int col_len = table[tableIndex].getColumn().length;
        Column1[] col = selectedColumns.toArray(new Column1[0]);

        if (col.length == col_len) {
            selectedTables.add(table[tableIndex]);
            selectedColumns = new LinkedList();
            from.push(new DefaultListModel<>());
            to = new DefaultListModel<>();
        }

        if (!to.isEmpty()) {

            selectedTables.add(new Table1(table[tableIndex].getTableName(), col, table[tableIndex++].getPrimaryColName()));

            selectedColumns = new LinkedList();
            from = new DefaultListModel<>();
            to = new DefaultListModel<>();

        }

    }

*/
    private void addBtnMouseClicked(java.awt.event.MouseEvent evt) {                                    
        setValuesFrom(unselectedList , from.get(tableIndex), selectedList , to.get(tableIndex));
    }                                   

    private void removeBtnMouseClicked(java.awt.event.MouseEvent evt) {                                       
        setValuesFrom(selectedList , to.get(tableIndex), unselectedList , from.get(tableIndex));
    }                                      

    private void allColumnRd1ActionPerformed(java.awt.event.ActionEvent evt) {                                             

        if (allColumnRd1.isSelected()) {
            setAllValuesFrom(unselectedList , from.get(tableIndex), selectedList , to.get(tableIndex));
        } else {
            setAllValuesFrom(selectedList, to.get(tableIndex), unselectedList , from.get(tableIndex));
        }

    }                                            

    public void setAllValuesFrom(JList fromList, DefaultListModel from, JList toList, DefaultListModel to) {

        int i = 0;
        while (!from.isEmpty()) {
            to.addElement(from.remove(0));
        }
        fromList.setModel(from);
        toList.setModel(to);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TableFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TableFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TableFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TableFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TableFrame().setVisible(true);
            }
        });
    }

    public void setValuesFrom(JList<String> fromList, DefaultListModel from, JList<String> toList, DefaultListModel to) {

        List<String> list = fromList.getSelectedValuesList();
        for (String s : list) {
            to.addElement(s);
            from.removeElement(s);
        }

        fromList.setModel(from);
        toList.setModel(to);

    }

    public String[] getSelectedData(int[] index) {
        List<String> list = selectedList.getSelectedValuesList();
        String[] s1 = new String[list.size()];
        int i = 0;

        for (String s : list) {
            s1[i++] = s;
        }
        return s1;
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel addBtn;
    private javax.swing.JRadioButton allBtnRD;
    private javax.swing.JRadioButton allColumnRd1;
    private javax.swing.JCheckBox backChk1;
    private javax.swing.JCheckBox cancelChk1;
    private javax.swing.JLabel columnSelectedLBL;
    private javax.swing.JLabel columnSelectedLBL1;
    private javax.swing.JLabel columnSelectedLBL2;
    private javax.swing.JLabel columnSelectedLBL3;
    private javax.swing.JLabel columnSelectedLBL4;
    private javax.swing.JLabel columnsSelectionLBL1;
    private javax.swing.JCheckBox deleteChk1;
    private javax.swing.JCheckBox insertChk1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JCheckBox nextChk1;
    private javax.swing.JButton nextTab;
    private javax.swing.JButton nextTab1;
    private javax.swing.JButton prevTab;
    private javax.swing.JButton prevTab1;
    private javax.swing.JLabel removeBtn;
    private javax.swing.JScrollPane scrollPane1;
    private javax.swing.JScrollPane scrollPane2;
    private javax.swing.JList<String> selectedList;
    private javax.swing.JLabel tableNameLBL1;
    private javax.swing.JLabel tableNameLBL2;
    private javax.swing.JPanel tableTab1;
    private javax.swing.JPanel tableTab2;
    private javax.swing.JList<String> unselectedList;
    private javax.swing.JCheckBox updateChk1;
    private javax.swing.JCheckBox viewChk1;
    // End of variables declaration                   
}

