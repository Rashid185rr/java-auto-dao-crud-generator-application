/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frame.jdbs;

import database.Database;
import database.table.Column1;
import database.table.Table1;
import fr.AppInfo;
import fr.FrameInfo;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JList;

/**
 *
 *
 *
 * @author tahir hussain
 */
public class TableFrame1 extends javax.swing.JFrame {

    /**
     * Creates new form TableFrame1
     */
    int[] buttons;
    Database database;
    Table1[] table;
    AppInfo thisAppInfo;
    AppInfo newAppInfo;
    String appName;
    String[] colName;
    int tableIndex;
    FrameInfo frame;
    List<FrameInfo> frameList;
    LinkedList<Table1> selectedTables;
    LinkedList<Column1> unselectedColumns;
    LinkedList<Column1> selectedColumns;

    DefaultListModel<String> from;
    DefaultListModel<String> to;

    public TableFrame1() {
        initComponents();
        table = null;
        //  columnIndex=0;
        frame = new FrameInfo();
        frameList = new LinkedList<>();
        from = new DefaultListModel<>();
        to = new DefaultListModel<>();

        selectedColumns = new LinkedList<>();
        selectedTables = new LinkedList();
        //  bgLBL.setIcon(getResizedImageIcon(getClass().getResource("/images/tower.jpg")));
        setValues();
    }

    public TableFrame1(AppInfo thisAppInfo, AppInfo newAppInfo, Database database) {
        initComponents();
        this.thisAppInfo = thisAppInfo;

        this.newAppInfo = newAppInfo;
        
        System.out.println("New App --->" + newAppInfo);
        appNameTxt.setText(newAppInfo.getAppTitle());
        this.database = database;
        this.table = database.getTables();

        frame = new FrameInfo();
        frame.setTitle(appName);
        frameList = new ArrayList<>();

        from = new DefaultListModel<>();
        to = new DefaultListModel<>();

        appNameTxt.setText(appName);
        selectedTables = new LinkedList();
        selectedColumns = new LinkedList();
        unselectedColumns = new LinkedList();
        buttons=new int[8];
        setValues();

    }

    /*
    public TableFrame1(String appName, Table1[] table) {
        initComponents();
        this.table = table;
        if (table != null) {
//            System.out.println("Selected tables:" + table.length);
        }

        frame = new FrameInfo();
        frame.setTitle(appName);
        frameList = new LinkedList<>();
        from = new DefaultListModel<>();
        to = new DefaultListModel<>();

        appNameTxt.setText(appName);

        selectedTables = new LinkedList();
        selectedColumns = new LinkedList();
        unselectedColumns = new LinkedList();
        //   bgLBL.setIcon(getResizedImageIcon(getClass().getResource("/images/tower.jpg")));
        setValues();
    }
     */
    public TableFrame1(Database database) {
        initComponents();
        this.table = database.getTables();
        this.database = database;
        frame = new FrameInfo();
        frameList = new LinkedList<>();
        from = new DefaultListModel<>();
        to = new DefaultListModel<>();
        selectedTables = new LinkedList();
        selectedColumns = new LinkedList();
        unselectedColumns = new LinkedList();
        //  bgLBL.setIcon(getResizedImageIcon(getClass().getResource("/images/tower.jpg")));
        setValues();
    }

    public DefaultListModel setFromModel(Table1 table) {
        from = new DefaultListModel<>();
        Column1[] columns = table.getColumn();
        List<String> itemList = new LinkedList<>();
        for (Column1 col : columns) {
            from.addElement(col.getColName());
        }
        return from;

    }

    public DefaultListModel setToModel(Table1 table) {
        to = new DefaultListModel<>();
        if (selectedTables.size() > 0 && selectedTables.contains(table)) {
            Column1[] columns = selectedTables.get(tableIndex).getColumn();
            for (Column1 col : columns) {
                to.addElement(col.getColName());
            }
        }
        return to;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        tableNameLBL = new javax.swing.JLabel();
        tabPane = new javax.swing.JTabbedPane();
        tableTab1 = new javax.swing.JPanel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        columnSelectedLBL = new javax.swing.JLabel();
        selectedScroll = new javax.swing.JScrollPane();
        selectedList = new javax.swing.JList<>();
        columnSelectedLBL1 = new javax.swing.JLabel();
        allColumnRd1 = new javax.swing.JRadioButton();
        columnsSelectionLBL1 = new javax.swing.JLabel();
        nextTable = new javax.swing.JButton();
        prevTable = new javax.swing.JButton();
        unselectedScroll = new javax.swing.JScrollPane();
        unselectedList = new javax.swing.JList<>();
        removeBtn = new javax.swing.JLabel();
        columnSelectedLBL4 = new javax.swing.JLabel();
        addBtn = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tableTab2 = new javax.swing.JPanel();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        tableNameLBL2 = new javax.swing.JLabel();
        columnSelectedLBL2 = new javax.swing.JLabel();
        columnSelectedLBL3 = new javax.swing.JLabel();
        allBtnRD = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        insertChk1 = new javax.swing.JCheckBox();
        deleteChk1 = new javax.swing.JCheckBox();
        updateChk1 = new javax.swing.JCheckBox();
        viewChk1 = new javax.swing.JCheckBox();
        cancelChk1 = new javax.swing.JCheckBox();
        nextChk1 = new javax.swing.JCheckBox();
        backChk1 = new javax.swing.JCheckBox();
        appLBL = new javax.swing.JLabel();
        appNameTxt = new javax.swing.JTextField();
        backBtn = new javax.swing.JButton();
        appBuilderBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1424, 1024));
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(53, 59, 72));
        jPanel1.setMinimumSize(new java.awt.Dimension(1500, 600));
        jPanel1.setPreferredSize(new java.awt.Dimension(1920, 1200));

        tableNameLBL.setBackground(new java.awt.Color(204, 204, 204));
        tableNameLBL.setFont(new java.awt.Font("sansserif", 1, 36)); // NOI18N
        tableNameLBL.setForeground(new java.awt.Color(255, 255, 255));
        tableNameLBL.setText("Table Name");

        tabPane.setBackground(new java.awt.Color(102, 102, 102));

        tableTab1.setBackground(new java.awt.Color(204, 204, 204));
        tableTab1.setMaximumSize(new java.awt.Dimension(1400, 800));
        tableTab1.setOpaque(false);
        tableTab1.setPreferredSize(new java.awt.Dimension(900, 417));
        tableTab1.setLayout(null);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        tableTab1.add(jLayeredPane1);
        jLayeredPane1.setBounds(813, 47, 0, 0);
        tableTab1.add(columnSelectedLBL);
        columnSelectedLBL.setBounds(140, 219, 114, 47);

        selectedList.setBackground(new java.awt.Color(153, 153, 153));
        selectedList.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        selectedList.setOpaque(false);
        selectedList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                selectedListValueChanged(evt);
            }
        });
        selectedScroll.setViewportView(selectedList);

        tableTab1.add(selectedScroll);
        selectedScroll.setBounds(770, 80, 320, 690);
        tableTab1.add(columnSelectedLBL1);
        columnSelectedLBL1.setBounds(10, 120, 140, 30);

        allColumnRd1.setBackground(new java.awt.Color(204, 204, 204));
        allColumnRd1.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        allColumnRd1.setForeground(new java.awt.Color(255, 255, 255));
        allColumnRd1.setText("Select All");
        allColumnRd1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allColumnRd1ActionPerformed(evt);
            }
        });
        tableTab1.add(allColumnRd1);
        allColumnRd1.setBounds(20, 200, 138, 35);

        columnsSelectionLBL1.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        columnsSelectionLBL1.setForeground(new java.awt.Color(255, 255, 255));
        columnsSelectionLBL1.setText("Columns Selected");
        tableTab1.add(columnsSelectionLBL1);
        columnsSelectionLBL1.setBounds(1140, 50, 150, 47);

        nextTable.setBackground(new java.awt.Color(87, 101, 116));
        nextTable.setForeground(new java.awt.Color(255, 255, 255));
        nextTable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frame/newsoftframe/images/next/next (2).png"))); // NOI18N
        nextTable.setText("NEXT TABLE");
        nextTable.setHideActionText(true);
        nextTable.setIconTextGap(5);
        nextTable.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/frame/newsoftframe/images/next/next (3).png"))); // NOI18N
        nextTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextTableActionPerformed(evt);
            }
        });
        tableTab1.add(nextTable);
        nextTable.setBounds(1130, 370, 170, 30);

        prevTable.setBackground(new java.awt.Color(87, 101, 116));
        prevTable.setForeground(new java.awt.Color(255, 255, 255));
        prevTable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frame/newsoftframe/images/back/ (6).png"))); // NOI18N
        prevTable.setText("PREVIOUS TABLE");
        prevTable.setAutoscrolls(true);
        prevTable.setFocusCycleRoot(true);
        prevTable.setIconTextGap(5);
        prevTable.setOpaque(true);
        prevTable.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/frame/newsoftframe/images/back/ (4).png"))); // NOI18N
        prevTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevTableActionPerformed(evt);
            }
        });
        tableTab1.add(prevTable);
        prevTable.setBounds(70, 370, 180, 30);

        unselectedScroll.setBackground(new java.awt.Color(87, 101, 116));

        unselectedList.setBackground(new java.awt.Color(87, 101, 116));
        unselectedList.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        unselectedList.setOpaque(false);
        unselectedList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                unselectedListValueChanged(evt);
            }
        });
        unselectedScroll.setViewportView(unselectedList);

        tableTab1.add(unselectedScroll);
        unselectedScroll.setBounds(280, 80, 320, 690);

        removeBtn.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        removeBtn.setForeground(new java.awt.Color(255, 255, 255));
        removeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frame/newsoftframe/images/back/ (4).png"))); // NOI18N
        removeBtn.setText("REMOVE");
        removeBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeBtnMouseClicked(evt);
            }
        });
        tableTab1.add(removeBtn);
        removeBtn.setBounds(610, 320, 140, 60);
        tableTab1.add(columnSelectedLBL4);
        columnSelectedLBL4.setBounds(1180, 130, 110, 30);

        addBtn.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        addBtn.setForeground(new java.awt.Color(255, 255, 255));
        addBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frame/newsoftframe/images/next/next (3).png"))); // NOI18N
        addBtn.setText("ADD");
        addBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addBtnMouseClicked(evt);
            }
        });
        tableTab1.add(addBtn);
        addBtn.setBounds(620, 250, 120, 60);

        jLabel5.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Selected Columns");
        tableTab1.add(jLabel5);
        jLabel5.setBounds(780, 20, 220, 40);

        jLabel6.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Unselected Columns");
        tableTab1.add(jLabel6);
        jLabel6.setBounds(290, 20, 240, 40);

        tabPane.addTab("Table", tableTab1);

        tableTab2.setBackground(new java.awt.Color(51, 51, 51));
        tableTab2.setOpaque(false);
        tableTab2.setPreferredSize(new java.awt.Dimension(1458, 673));
        tableTab2.setLayout(null);

        javax.swing.GroupLayout jLayeredPane2Layout = new javax.swing.GroupLayout(jLayeredPane2);
        jLayeredPane2.setLayout(jLayeredPane2Layout);
        jLayeredPane2Layout.setHorizontalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jLayeredPane2Layout.setVerticalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        tableTab2.add(jLayeredPane2);
        jLayeredPane2.setBounds(813, 47, 0, 0);

        tableNameLBL2.setFont(new java.awt.Font("sansserif", 0, 36)); // NOI18N
        tableNameLBL2.setForeground(new java.awt.Color(255, 255, 255));
        tableNameLBL2.setText("Table Name");
        tableTab2.add(tableNameLBL2);
        tableNameLBL2.setBounds(290, 6, 452, 111);
        tableTab2.add(columnSelectedLBL2);
        columnSelectedLBL2.setBounds(140, 219, 114, 47);
        tableTab2.add(columnSelectedLBL3);
        columnSelectedLBL3.setBounds(180, 520, 510, 140);

        allBtnRD.setFont(new java.awt.Font("sansserif", 1, 36)); // NOI18N
        allBtnRD.setForeground(new java.awt.Color(255, 255, 255));
        allBtnRD.setText("Select All");
        allBtnRD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                allBtnRDMouseClicked(evt);
            }
        });
        tableTab2.add(allBtnRD);
        allBtnRD.setBounds(30, 220, 210, 40);

        jLabel2.setFont(new java.awt.Font("sansserif", 0, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Buttons");
        tableTab2.add(jLabel2);
        jLabel2.setBounds(20, 130, 364, 73);

        insertChk1.setBackground(new java.awt.Color(255, 255, 255));
        insertChk1.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        insertChk1.setForeground(new java.awt.Color(255, 255, 255));
        insertChk1.setText("INSERT");
        insertChk1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertChk1ActionPerformed(evt);
            }
        });
        tableTab2.add(insertChk1);
        insertChk1.setBounds(60, 280, 158, 42);

        deleteChk1.setBackground(new java.awt.Color(255, 255, 255));
        deleteChk1.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        deleteChk1.setForeground(new java.awt.Color(255, 255, 255));
        deleteChk1.setText("DELETE");
        deleteChk1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteChk1ActionPerformed(evt);
            }
        });
        tableTab2.add(deleteChk1);
        deleteChk1.setBounds(60, 320, 158, 42);

        updateChk1.setBackground(new java.awt.Color(255, 255, 255));
        updateChk1.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        updateChk1.setForeground(new java.awt.Color(255, 255, 255));
        updateChk1.setText("UPDATE");
        updateChk1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateChk1ActionPerformed(evt);
            }
        });
        tableTab2.add(updateChk1);
        updateChk1.setBounds(60, 360, 158, 42);

        viewChk1.setBackground(new java.awt.Color(255, 255, 255));
        viewChk1.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        viewChk1.setForeground(new java.awt.Color(255, 255, 255));
        viewChk1.setText("VIEW");
        viewChk1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewChk1ActionPerformed(evt);
            }
        });
        tableTab2.add(viewChk1);
        viewChk1.setBounds(60, 400, 158, 42);

        cancelChk1.setBackground(new java.awt.Color(255, 255, 255));
        cancelChk1.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        cancelChk1.setForeground(new java.awt.Color(255, 255, 255));
        cancelChk1.setText("CANCEL");
        cancelChk1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelChk1ActionPerformed(evt);
            }
        });
        tableTab2.add(cancelChk1);
        cancelChk1.setBounds(60, 440, 158, 42);

        nextChk1.setBackground(new java.awt.Color(255, 255, 255));
        nextChk1.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        nextChk1.setForeground(new java.awt.Color(255, 255, 255));
        nextChk1.setText("NEXT");
        nextChk1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextChk1ActionPerformed(evt);
            }
        });
        tableTab2.add(nextChk1);
        nextChk1.setBounds(60, 520, 158, 42);

        backChk1.setBackground(new java.awt.Color(255, 255, 255));
        backChk1.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        backChk1.setForeground(new java.awt.Color(255, 255, 255));
        backChk1.setText("BACK");
        backChk1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backChk1ActionPerformed(evt);
            }
        });
        tableTab2.add(backChk1);
        backChk1.setBounds(60, 480, 158, 42);

        tabPane.addTab("Buttons", tableTab2);

        appLBL.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        appLBL.setText("Application Name");

        backBtn.setBackground(new java.awt.Color(87, 101, 116));
        backBtn.setForeground(new java.awt.Color(255, 255, 255));
        backBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frame/newsoftframe/images/back/ (6).png"))); // NOI18N
        backBtn.setText("BACK");
        backBtn.setHideActionText(true);
        backBtn.setIconTextGap(5);
        backBtn.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/frame/newsoftframe/images/back/ (4).png"))); // NOI18N
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        appBuilderBtn.setBackground(new java.awt.Color(87, 101, 116));
        appBuilderBtn.setForeground(new java.awt.Color(255, 255, 255));
        appBuilderBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frame/newsoftframe/images/next/next (2).png"))); // NOI18N
        appBuilderBtn.setText("NEXT");
        appBuilderBtn.setHideActionText(true);
        appBuilderBtn.setIconTextGap(5);
        appBuilderBtn.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/frame/newsoftframe/images/next/next (3).png"))); // NOI18N
        appBuilderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appBuilderBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(479, 479, 479)
                        .addComponent(tableNameLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tabPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1417, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(appLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(appNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(448, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(appBuilderBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(appLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(appNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableNameLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 710, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(appBuilderBtn)
                            .addComponent(backBtn))
                        .addGap(233, 233, 233))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tabPane, javax.swing.GroupLayout.PREFERRED_SIZE, 850, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(131, Short.MAX_VALUE))))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1920, 1200);

        pack();
    }// </editor-fold>                        

    private void selectedListValueChanged(javax.swing.event.ListSelectionEvent evt) {                                          

    }                                         

    private void allColumnRd1ActionPerformed(java.awt.event.ActionEvent evt) {                                             

        if (allColumnRd1.isSelected()) {
            setAllValuesFrom(unselectedList, from, selectedList, to);

        } else {
            setAllValuesFrom(selectedList, to, unselectedList, from);
        }
    }                                            

    private void nextTableActionPerformed(java.awt.event.ActionEvent evt) {                                          
        next();
        System.out.println(" selected tables-->" + Arrays.asList(selectedTables));
        if (tableIndex < table.length - 1) {
            tableIndex++;
        }
        setValues();

        allColumnRd1.setSelected(false);
    }                                         
    public void setFrame() {
//        setFrameButtons();
        deleteIfExists();
        System.out.println("Table Index-->" + tableIndex + "  " + selectedTables.size());

        if (appNameTxt.getText() != null && !appNameTxt.getText().trim().equals("")) {
            newAppInfo.setAppTitle(appNameTxt.getText());
        }
        frame.setTitle(table[tableIndex].getTableName());
        setFrameButtons();
        frameList.add(frame);

        newAppInfo.setFrameList(frameList);
        System.out.println("New App --->           ---->" + newAppInfo);
        frame = new FrameInfo();
//        frameList.clear();

    }

    public void deleteIfExists() {
        boolean bool = false;
        int index = 0;
        for (FrameInfo f : frameList) {
            if (f.getTitle().equals(table[tableIndex].getTableName())) {
                bool = true;
                break;
            }
            index++;
        }
        if (bool) {
            frameList.remove(index);
        }

    }
    private void prevTableActionPerformed(java.awt.event.ActionEvent evt) {                                          
        selectedColumns.clear();
        to.clear();
        from.clear();
        unselectedColumns.clear();
        boolean bool = false;

        tableIndex--;
        if (tableIndex < 0) {
            tableIndex = 0;
        }
//        System.out.println("Table Index:" + tableIndex);
        tableNameLBL.setText(table[tableIndex].getTableName());
        int index = -1;
        for (Table1 t : selectedTables) {
            if (t.getTableName().equals(table[tableIndex].getTableName())) {
                bool = true;
                index++;
                break;
            }
            index++;
        }
        if (bool) {
            Column1[] c = selectedTables.get(index).getColumn();
            label:
            for (Column1 col : table[tableIndex].getColumn()) {
                for (int i = 0; i < c.length; i++) {
                    if (col.equals(c[i])) {
                        selectedColumns.add(col);
                        to.addElement(col.getColName());
                        continue label;
                    }
                }
                unselectedColumns.add(col);
                from.addElement(col.getColName());
            }
//            frameBtn();
//        setFrame();
        } else {
            for (Column1 col : table[tableIndex].getColumn()) {
                unselectedColumns.add(col);
                from.addElement(col.getColName());
                unselectAllBtn();
            }
        }

        allColumnRd1.setSelected(false);

    }                                         

    public void unselectAllBtn(){
    
    }
    public void frameBtn(){
            
        frameList=newAppInfo.getFrameList();
        
        
        
        
    }
    
    private void unselectedListValueChanged(javax.swing.event.ListSelectionEvent evt) {                                            

    }                                           

    private void removeBtnMouseClicked(java.awt.event.MouseEvent evt) {                                       
        setValuesFrom(selectedList, to, unselectedList, from);
    }                                      

    private void addBtnMouseClicked(java.awt.event.MouseEvent evt) {                                    
        setValuesFrom(unselectedList, from, selectedList, to);
    }                                   

    private void allBtnRDMouseClicked(java.awt.event.MouseEvent evt) {                                      
        // doing it manually irritated me.

        // alternatives exist
        if (allBtnRD.isSelected()) {
            frame.setBackBtn(true);
            frame.setDeleteBtn(true);
            frame.setInsertBtn(true);
            frame.setIsTable(true);
            frame.setNextBtn(true);
            frame.setUpdateBtn(true);
            frame.setViewBtn(true);
            insertChk1.setSelected(true);
            insertChk1.setEnabled(false);
            updateChk1.setSelected(true);
            updateChk1.setEnabled(false);
            backChk1.setSelected(true);
            backChk1.setEnabled(false);
            nextChk1.setEnabled(false);
            nextChk1.setSelected(true);
            viewChk1.setEnabled(false);
            viewChk1.setSelected(true);
            deleteChk1.setSelected(true);
            deleteChk1.setEnabled(false);
            cancelChk1.setSelected(true);
            cancelChk1.setEnabled(false);

        } else {
            frame.setBackBtn(false);
            frame.setDeleteBtn(false);
            frame.setInsertBtn(false);
            frame.setIsTable(false);
            frame.setNextBtn(false);
            frame.setUpdateBtn(false);
            frame.setViewBtn(false);
            insertChk1.setSelected(false);
            insertChk1.setEnabled(true);
            updateChk1.setSelected(false);
            updateChk1.setEnabled(true);
            backChk1.setSelected(false);
            backChk1.setEnabled(true);
            nextChk1.setEnabled(true);
            nextChk1.setSelected(false);
            viewChk1.setEnabled(true);
            viewChk1.setSelected(false);
            deleteChk1.setSelected(false);
            deleteChk1.setEnabled(true);
            cancelChk1.setSelected(false);
            cancelChk1.setEnabled(true);

        }
    }                                     

    private void insertChk1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void deleteChk1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // System.out.println("delete is selected");
    }                                          

    private void updateChk1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        System.out.println("update is selected");
    }                                          

    private void viewChk1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        System.out.println("view is selected");
    }                                        

    private void cancelChk1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void nextChk1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void backChk1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    private void appBuilderBtnActionPerformed(java.awt.event.ActionEvent evt) {                                              
        next();
//        setFrame();

        allColumnRd1.setSelected(false);
        Table1[] t = selectedTables.toArray(new Table1[0]);
        List<Table1> unselected = new ArrayList<>();
        int indexx = 0;
        for (Table1 d : t) {
            if (!isSelected(d)) {
                unselected.add(d);
            }
        }
        database.setTables(t);

        new AppBuilder(thisAppInfo, newAppInfo, unselected.toArray(new Table1[0]), selectedTables.toArray(new Table1[0])).setVisible(true);
        setVisible(false);
    }                                             

    public boolean isSelected(Table1 t) {
        for (Table1 tab : selectedTables) {
            if (tab.getTableName().equals(t.getTableName())) {
                return true;
            }
        }
        return false;
    }

    public void next() {

        if (tableIndex < table.length) {
            if (to.isEmpty() && from.isEmpty()) {
                throw new NullPointerException("Both empty?");
            }

            if (!from.isEmpty() && !to.isEmpty()) {
                Column1[] a = table[tableIndex].getColumn();
                for (int i = 0; i < to.size(); i++) {
                    for (int j = 0; j < a.length; j++) {
                        if (to.get(i).equals(a[j].getColName()) && !selectedColumns.contains(a[j])) {
//                            System.out.println("!from.isEmpty() && !to.isEmpty()");
                            selectedColumns.add(a[j]);
                            unselectedColumns.remove(a[j]);
                            break;
                        }
                    }
                }

                for (int i = 0; i < from.size(); i++) {
                    for (int j = 0; j < a.length; j++) {
                        if (from.get(i).equals(a[j].getColName()) && !unselectedColumns.contains(a[j])) {
//                            System.out.println("!from.isEmpty() && !to.isEmpty()");
                            unselectedColumns.add(a[j]);
                            selectedColumns.remove(a[j]);
                            break;
                        }

                    }

                }

            }

            if (selectedColumns.size() != 0) {
                //System.out.println("selected column--->"+selectedTables);
//                display();
                removeIfExists();

                selectedTables.add(
                        new Table1(table[tableIndex].getTableName(), selectedColumns.toArray(new Column1[0]), table[tableIndex].getPrimaryColName()));
                setFrame();
//                frameList.add(frame);

                selectedColumns.clear();
            }
            from.clear();
            unselectedColumns.clear();
        }
    }

    public void removeIfExists() {
        boolean bool = false;
        int index = -1;
        for (Table1 j : selectedTables) {
            if (j.getTableName().equals(table[tableIndex].getTableName())) {
//                selectedTables.remove(j);
                index++;
                bool = true;
            break;
            }
            index++;
        }

        if (bool) {
            selectedTables.remove(index);
        }

    }

    public void display() {
//        System.out.println("Selected Tables ");
        for (Table1 t : selectedTables) {
            System.out.println(t);
        }
    }

    public void setValues() {
        if (table != null) {
            if (tableIndex < table.length) {
                if (!selectedTables.isEmpty()) {
//                    System.out.println("table:-->" + table[tableIndex]);
//                    if (selectedTables.contains(table[tableIndex])) {

                    if (isSelected(table[tableIndex])) {
                        setColumns();
                        if (!unselectedColumns.isEmpty()) {
                            from = new DefaultListModel<>();
                            int size = unselectedColumns.size();
                            for (int i = 0; i < size; i++) {

                                from.addElement(unselectedColumns.get(i).getColName());

                            }
                        }
                        if (!selectedColumns.isEmpty()) {
                            to = new DefaultListModel<>();
                            int size = selectedColumns.size();
                            for (int i = 0; i < size; i++) {
                                to.addElement(selectedColumns.get(i).getColName());
                            }

                        } else {
                            to = new DefaultListModel<>();
                        }
                    } else {
//                        System.out.println("Table is not selected----------");
                        unselectedList.setModel(setFromModel(table[tableIndex]));
                        for (Column1 co : table[tableIndex].getColumn()) {
                            unselectedColumns.add(co);
                        }
                        to.removeAllElements();
                        selectedList.setModel(setToModel(table[tableIndex]));
                    }
//                    setFrame();

                } else {
//                    System.out.println("Table is not selected.................");
                    unselectedList.setModel(setFromModel(table[tableIndex]));
                    for (Column1 co : table[tableIndex].getColumn()) {
                        unselectedColumns.add(co);
                    }
                    to.removeAllElements();
                    selectedList.setModel(setToModel(table[tableIndex]));
                }
                tableNameLBL.setText(table[tableIndex].getTableName());

            }
        }

    }

    public void setColumns() {

        int index = -1;
        boolean bool = false;
        for (Table1 t : selectedTables) {
            if (t.getTableName().equals(table[tableIndex].getTableName())) {
                bool = true;
                index++;
                break;

            }
            index++;
        }
        if (bool) {
            Column1[] c = selectedTables.get(index).getColumn();
            label:
            for (Column1 col : table[tableIndex].getColumn()) {
                for (int i = 0; i < c.length; i++) {
                    if (col.equals(c[i])) {
                        selectedColumns.add(col);
                        to.addElement(col.getColName());
                        continue label;
                    }
                }
                unselectedColumns.add(col);
                from.addElement(col.getColName());
            }
        } else {
            for (Column1 col : table[tableIndex].getColumn()) {
                unselectedColumns.add(col);
                from.addElement(col.getColName());
            }
        }

    }

    public Column1[] getUnselectedCol(String tableName) {

        for (Table1 s : selectedTables) {

            if (s.getTableName().equals(tableName)) {

                for (Column1 col : s.getColumn()) {

                }
            }
        }
        return null;
    }

    public void setFrameButtons() {
        System.out.println("Setting buttons");
        if (allBtnRD.isSelected()) {
            
        System.out.println("All selected ");
            frame.setAllBtn(true);
        } else if (!insertChk1.isSelected() && !deleteChk1.isSelected() && !updateChk1.isSelected() && !viewChk1.isSelected()
                && !cancelChk1.isSelected() && !backChk1.isSelected() && !nextChk1.isSelected()) {
        
        System.out.println("all not selected");
            frame.setAllBtn(true);
        
        } else {
            System.out.println("INSERT");
            if (insertChk1.isSelected()) {
                frame.setInsertBtn(true);
            }
            if (deleteChk1.isSelected()) {
                frame.setInsertBtn(true);
            }
            if (updateChk1.isSelected()) {
                frame.setInsertBtn(true);
            }
            if (viewChk1.isSelected()) {
                
            System.out.println("vIEW");
                frame.setInsertBtn(true);
            }
            if (cancelChk1.isSelected()) {
                frame.setInsertBtn(true);
            }
            if (backChk1.isSelected()) {
                frame.setInsertBtn(true);
            }
            if (nextChk1.isSelected()) {
                frame.setInsertBtn(true);
            }

        }

    }

    public void setAllValuesFrom(JList fromList, DefaultListModel from, JList toList, DefaultListModel to) {
        int i = 0;
        while (!from.isEmpty()) {
            to.addElement(from.remove(0));
        }
        for (Column1 t : table[tableIndex].getColumn()) {
            selectedColumns.add(t);
        }

        fromList.setModel(from);
        toList.setModel(to);

    }

    public void setValuesFrom(JList<String> fromList, DefaultListModel from, JList<String> toList, DefaultListModel to) {
        List<String> list = fromList.getSelectedValuesList();
        for (String s : list) {
            to.addElement(s);
            from.removeElement(s);
        }
        fromList.setModel(from);
        toList.setModel(to);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TableFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TableFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TableFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TableFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TableFrame1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel addBtn;
    private javax.swing.JRadioButton allBtnRD;
    private javax.swing.JRadioButton allColumnRd1;
    private javax.swing.JButton appBuilderBtn;
    private javax.swing.JLabel appLBL;
    private javax.swing.JTextField appNameTxt;
    private javax.swing.JButton backBtn;
    private javax.swing.JCheckBox backChk1;
    private javax.swing.JCheckBox cancelChk1;
    private javax.swing.JLabel columnSelectedLBL;
    private javax.swing.JLabel columnSelectedLBL1;
    private javax.swing.JLabel columnSelectedLBL2;
    private javax.swing.JLabel columnSelectedLBL3;
    private javax.swing.JLabel columnSelectedLBL4;
    private javax.swing.JLabel columnsSelectionLBL1;
    private javax.swing.JCheckBox deleteChk1;
    private javax.swing.JCheckBox insertChk1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox nextChk1;
    private javax.swing.JButton nextTable;
    private javax.swing.JButton prevTable;
    private javax.swing.JLabel removeBtn;
    private javax.swing.JList<String> selectedList;
    private javax.swing.JScrollPane selectedScroll;
    private javax.swing.JTabbedPane tabPane;
    private javax.swing.JLabel tableNameLBL;
    private javax.swing.JLabel tableNameLBL2;
    private javax.swing.JPanel tableTab1;
    private javax.swing.JPanel tableTab2;
    private javax.swing.JList<String> unselectedList;
    private javax.swing.JScrollPane unselectedScroll;
    private javax.swing.JCheckBox updateChk1;
    private javax.swing.JCheckBox viewChk1;
    // End of variables declaration                   
}

